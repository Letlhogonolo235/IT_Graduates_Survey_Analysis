} else if (toolType == "Web Frameworks") {
# Code to create web frameworks plot
tool_data <- cleaned_data %>%
separate_rows(WebFramework, sep = ";") %>%
count(WebFramework, sort = TRUE) %>%
top_n(10, n)
ggplot(tool_data, aes(x = reorder(WebFramework, n), y = n)) +
geom_bar(stat = "identity", fill = "green") +
coord_flip() +
labs(title = "Top Web Frameworks Used by Graduates", x = "Web frameworks", y = "Count")
} else if (toolType == "AI Search") {
tool_data <- cleaned_data %>%
separate_rows(AISearch, sep = ";") %>%
count(AISearch, sort = TRUE) %>%
top_n(10, n)
ggplot(tool_data, aes(x = reorder(AISearch, n), y = n)) +
geom_bar(stat = "identity", fill = "red") +
coord_flip() +
labs(title = "Top AISearch Used by Graduates", x = "AISearch", y = "Count")
} else if (toolType == "AI Tools") {
# Code to create AI tools plot
tool_data <- cleaned_data %>%
separate_rows(AITool, sep = ";") %>%
count(AITool, sort = TRUE) %>%
top_n(10, n)
ggplot(tool_data, aes(x = reorder(AITool, n), y = n)) +
geom_bar(stat = "identity", fill = "steelblue") +
coord_flip() +
labs(title = "Top AI developer tools Used by Graduates", x = "AI Tools", y = "Count")
}
})
# Industry distribution plot
output$industryPlot <- renderPlot({
# Code to create industry distribution plot
industry_counts <- filtered_data() %>%
separate_rows(Industry, sep = ";") %>%
count(Industry, sort = TRUE)
ggplot(industry_counts, aes(x = reorder(Industry, n), y = n)) +
geom_bar(stat = "identity", fill = "red") +
coord_flip() +
labs(title = "Industries Graduates Work In", x = "Industry", y = "Count")
})
# Job roles plot
output$rolePlot <- renderPlot({
# Code to create job roles plot
role_counts <- filtered_data() %>%
count(Role, sort = TRUE)
ggplot(role_counts, aes(x = reorder(Role, n), y = n)) +
geom_bar(stat = "identity", fill = "orange") +
coord_flip() +
labs(title = "Top Job Roles by Study Field", x = "Job Role", y = "Count") +
theme_minimal()
})
# Employment rate plot
output$employmentPlot <- renderPlot({
# Code to create employment rate plot
employment_rate <- filtered_data() %>%
filter(!is.na(Employment)) %>%
group_by(StudyField) %>%
summarise(Employed = sum(Employment == "Employed", na.rm = TRUE),
Total = n(),
EmploymentRate = Employed / Total * 100) %>%
drop.na(EmploymentRate)
ggplot(employment_rate, aes(x = StudyField, y = EmploymentRate, fill = StudyField)) +
geom_bar(stat = "identity", na.rm = TRUE) +
labs(title = "Employment Rate by Study Field", x = "Study Field", y = "Employment Rate (%)") +
theme_minimal()
})
}
# Run the application
shinyApp(ui = ui, server = server)
# Load necessary libraries
library(shiny)
library(ggplot2)
library(dplyr)
library(tidyr)
library(readr)
# Load the dataset
data <- read_csv("C:/graduate_survey.csv")
# Define UI
ui <- fluidPage(
titlePanel("Eduvos IT Graduates Survey Analysis"),
sidebarLayout(
sidebarPanel(
selectInput("toolType", "Select Tool Type:",
choices = c("Programming Languages", "Databases", "Web Frameworks", "AI Tools")),
selectInput("studyField", "Select Study Field:",
choices = unique(data$StudyField)),
actionButton("update", "Update View")
),
mainPanel(
tabsetPanel(
tabPanel("Overview", plotOutput("overviewPlot")),
tabPanel("Industry Distribution", plotOutput("industryPlot")),
tabPanel("Job Roles", plotOutput("rolePlot")),
tabPanel("Employment Rate", plotOutput("employmentPlot"))
)
)
)
)
# Define server logic
server <- function(input, output) {
# Reactive expression to filter data based on user input
filtered_data <- reactive({
data %>% filter(StudyField == input$studyField)
})
# Overview plot
output$overviewPlot <- renderPlot({
toolType <- input$toolType
# Create plots based on selected tool type
if (toolType == "Programming Languages") {
# Code to create programming languages plot
tool_data <- cleaned_data %>%
separate_rows(ProgLang, sep = ";") %>%
count(ProgLang, sort = TRUE) %>%
top_n(10, n)
ggplot(tool_data, aes(x = reorder(ProgLang, n), y = n)) +
geom_bar(stat = "identity", fill = "blue") +
coord_flip() +
labs(title = "Top Programming Languages Used by Graduates", x = "Programming Languages", y = "Count")
} else if (toolType == "Databases") {
# Code to create databases plot
tool_data <- cleaned_data %>%
separate_rows(Databases, sep = ";") %>%
count(Databases, sort = TRUE) %>%
top_n(10, n)
ggplot(tool_data, aes(x = reorder(Databases, n), y = n)) +
geom_bar(stat = "identity", fill = "orange") +
coord_flip() +
labs(title = "Top Databases Used by Graduates", x = "Databases", y = "Count")
} else if (toolType == "Platforms") {
tool_data <- cleaned_data %>%
separate_rows(Platform, sep = ";") %>%
count(Platform, sort = TRUE) %>%
top_n(10, n)
ggplot(tool_data, aes(x = reorder(Platform, n), y = n)) +
geom_bar(stat = "identity", fill = "purple") +
coord_flip() +
labs(title = "Top Platforms Used by Graduates", x = "Platforms", y = "Count")
} else if (toolType == "Web Frameworks") {
# Code to create web frameworks plot
tool_data <- cleaned_data %>%
separate_rows(WebFramework, sep = ";") %>%
count(WebFramework, sort = TRUE) %>%
top_n(10, n)
ggplot(tool_data, aes(x = reorder(WebFramework, n), y = n)) +
geom_bar(stat = "identity", fill = "green") +
coord_flip() +
labs(title = "Top Web Frameworks Used by Graduates", x = "Web frameworks", y = "Count")
} else if (toolType == "AI Search") {
tool_data <- cleaned_data %>%
separate_rows(AISearch, sep = ";") %>%
count(AISearch, sort = TRUE) %>%
top_n(10, n)
ggplot(tool_data, aes(x = reorder(AISearch, n), y = n)) +
geom_bar(stat = "identity", fill = "red") +
coord_flip() +
labs(title = "Top AISearch Used by Graduates", x = "AISearch", y = "Count")
} else if (toolType == "AI Tools") {
# Code to create AI tools plot
tool_data <- cleaned_data %>%
separate_rows(AITool, sep = ";") %>%
count(AITool, sort = TRUE) %>%
top_n(10, n)
ggplot(tool_data, aes(x = reorder(AITool, n), y = n)) +
geom_bar(stat = "identity", fill = "steelblue") +
coord_flip() +
labs(title = "Top AI developer tools Used by Graduates", x = "AI Tools", y = "Count")
}
})
# Industry distribution plot
output$industryPlot <- renderPlot({
# Code to create industry distribution plot
industry_counts <- filtered_data() %>%
separate_rows(Industry, sep = ";") %>%
count(Industry, sort = TRUE)
ggplot(industry_counts, aes(x = reorder(Industry, n), y = n)) +
geom_bar(stat = "identity", fill = "red") +
coord_flip() +
labs(title = "Industries Graduates Work In", x = "Industry", y = "Count")
})
# Job roles plot
output$rolePlot <- renderPlot({
# Code to create job roles plot
role_counts <- filtered_data() %>%
count(Role, sort = TRUE)
ggplot(role_counts, aes(x = reorder(Role, n), y = n)) +
geom_bar(stat = "identity", fill = "orange") +
coord_flip() +
labs(title = "Top Job Roles by Study Field", x = "Job Role", y = "Count") +
theme_minimal()
})
# Employment rate plot
output$employmentPlot <- renderPlot({
# Code to create employment rate plot
employment_rate <- filtered_data() %>%
filter(!is.na(Employment)) %>%
group_by(StudyField) %>%
summarise(Employed = sum(Employment == "Employed", na.rm = TRUE),
Total = n(),
EmploymentRate = Employed / Total * 100) %>%
drop_na(EmploymentRate)
ggplot(employment_rate, aes(x = StudyField, y = EmploymentRate, fill = StudyField)) +
geom_bar(stat = "identity", na.rm = TRUE) +
labs(title = "Employment Rate by Study Field", x = "Study Field", y = "Employment Rate (%)") +
theme_minimal()
})
}
# Run the application
shinyApp(ui = ui, server = server)
# Load necessary libraries
library(shiny)
library(ggplot2)
library(dplyr)
library(tidyr)
library(readr)
# Load the dataset
data <- read_csv("C:/graduate_survey.csv")
# Define UI
ui <- fluidPage(
titlePanel("Eduvos IT Graduates Survey Analysis"),
sidebarLayout(
sidebarPanel(
selectInput("toolType", "Select Tool Type:",
choices = c("Programming Languages", "Databases", "Web Frameworks", "AI Tools")),
selectInput("studyField", "Select Study Field:",
choices = unique(data$StudyField)),
actionButton("update", "Update View")
),
mainPanel(
tabsetPanel(
tabPanel("Overview", plotOutput("overviewPlot")),
tabPanel("Industry Distribution", plotOutput("industryPlot")),
tabPanel("Job Roles", plotOutput("rolePlot")),
tabPanel("Employment Rate", plotOutput("employmentPlot"))
)
)
)
)
# Define server logic
server <- function(input, output) {
# Reactive expression to filter data based on user input
filtered_data <- reactive({
data %>% filter(StudyField == input$studyField)
})
# Overview plot
output$overviewPlot <- renderPlot({
toolType <- input$toolType
# Load necessary libraries
library(shiny)
library(ggplot2)
library(dplyr)
library(tidyr)
library(readr)
# Load the dataset
data <- read_csv("C:/graduate_survey.csv")
# Define UI
ui <- fluidPage(
titlePanel("Eduvos IT Graduates Survey Analysis"),
sidebarLayout(
sidebarPanel(
selectInput("toolType", "Select Tool Type:",
choices = c("Programming Languages", "Databases", "Platforms", "Web Frameworks", "AI Searches", "AI Tools")),
selectInput("studyField", "Select Study Field:",
choices = unique(data$StudyField)),
actionButton("update", "Update View")
),
mainPanel(
tabsetPanel(
tabPanel("Overview", plotOutput("overviewPlot")),
tabPanel("Industry Distribution", plotOutput("industryPlot")),
tabPanel("Job Roles", plotOutput("rolePlot")),
tabPanel("Employment Rate", plotOutput("employmentPlot"))
)
)
)
)
# Define server logic
server <- function(input, output) {
# Reactive expression to filter data based on user input
filtered_data <- reactive({
data %>% filter(StudyField == input$studyField)
})
# Overview plot
output$overviewPlot <- renderPlot({
toolType <- input$toolType
# Create plots based on selected tool type
if (toolType == "Programming Languages") {
# Code to create programming languages plot
tool_data <- cleaned_data %>%
separate_rows(ProgLang, sep = ";") %>%
count(ProgLang, sort = TRUE) %>%
top_n(10, n)
ggplot(tool_data, aes(x = reorder(ProgLang, n), y = n)) +
geom_bar(stat = "identity", fill = "blue") +
coord_flip() +
labs(title = "Top Programming Languages Used by Graduates", x = "Programming Languages", y = "Count")
} else if (toolType == "Databases") {
# Code to create databases plot
tool_data <- cleaned_data %>%
separate_rows(Databases, sep = ";") %>%
count(Databases, sort = TRUE) %>%
top_n(10, n)
ggplot(tool_data, aes(x = reorder(Databases, n), y = n)) +
geom_bar(stat = "identity", fill = "pink") +
coord_flip() +
labs(title = "Top Databases Used by Graduates", x = "Databases", y = "Count")
} else if (toolType == "Platforms") {
tool_data <- cleaned_data %>%
separate_rows(Platform, sep = ";") %>%
count(Platform, sort = TRUE) %>%
top_n(10, n)
ggplot(tool_data, aes(x = reorder(Platform, n), y = n)) +
geom_bar(stat = "identity", fill = "purple") +
coord_flip() +
labs(title = "Top Platforms Used by Graduates", x = "Platforms", y = "Count")
} else if (toolType == "Web Frameworks") {
# Code to create web frameworks plot
tool_data <- cleaned_data %>%
separate_rows(WebFramework, sep = ";") %>%
count(WebFramework, sort = TRUE) %>%
top_n(10, n)
ggplot(tool_data, aes(x = reorder(WebFramework, n), y = n)) +
geom_bar(stat = "identity", fill = "green") +
coord_flip() +
labs(title = "Top Web Frameworks Used by Graduates", x = "Web frameworks", y = "Count")
} else if (toolType == "AI Searches") {
tool_data <- cleaned_data %>%
separate_rows(AISearch, sep = ";") %>%
count(AISearch, sort = TRUE) %>%
top_n(10, n)
ggplot(tool_data, aes(x = reorder(AISearch, n), y = n)) +
geom_bar(stat = "identity", fill = "darkblue") +
coord_flip() +
labs(title = "Top AI Search Used by Graduates", x = "AI Searches", y = "Count")
} else if (toolType == "AI Tools") {
# Code to create AI tools plot
tool_data <- cleaned_data %>%
separate_rows(AITool, sep = ";") %>%
count(AITool, sort = TRUE) %>%
top_n(10, n)
ggplot(tool_data, aes(x = reorder(AITool, n), y = n)) +
geom_bar(stat = "identity", fill = "yellow") +
coord_flip() +
labs(title = "Top AI developer tools Used by Graduates", x = "AI Tools", y = "Count")
}
})
# Industry distribution plot
output$industryPlot <- renderPlot({
# Code to create industry distribution plot
industry_counts <- filtered_data() %>%
separate_rows(Industry, sep = ";") %>%
count(Industry, sort = TRUE)
ggplot(industry_counts, aes(x = reorder(Industry, n), y = n)) +
geom_bar(stat = "identity", fill = "red") +
coord_flip() +
labs(title = "Industries Graduates Work In", x = "Industry", y = "Count")
})
# Job roles plot
output$rolePlot <- renderPlot({
# Code to create job roles plot
role_counts <- filtered_data() %>%
count(Role, sort = TRUE)
ggplot(role_counts, aes(x = reorder(Role, n), y = n)) +
geom_bar(stat = "identity", fill = "orange") +
coord_flip() +
labs(title = "Top Job Roles by Study Field", x = "Job Role", y = "Count") +
theme_minimal()
})
# Employment rate plot
output$employmentPlot <- renderPlot({
# Code to create employment rate plot
employment_rate <- filtered_data() %>%
filter(!is.na(Employment)) %>%
group_by(StudyField) %>%
summarise(Employed = sum(Employment == "Employed", na.rm = TRUE),
Total = n(),
EmploymentRate = Employed / Total * 100) %>%
drop_na(EmploymentRate)
ggplot(employment_rate, aes(x = StudyField, y = EmploymentRate, fill = StudyField)) +
geom_bar(stat = "identity", na.rm = TRUE) +
labs(title = "Employment Rate by Study Field", x = "Study Field", y = "Employment Rate (%)") +
theme_minimal()
})
}
# Run the application
shinyApp(ui = ui, server = server)
runApp('RStudio work/R Shiny to analyze a survey data from Eduvos IT graduates.R')
library(shiny); runApp('RStudio work/R Shiny to analyze a survey data from Eduvos IT graduates.R')
runApp('RStudio work/R Shiny to analyze a survey data from Eduvos IT graduates.R')
runApp('RStudio work/R Shiny to analyze a survey data from Eduvos IT graduates.R')
runApp('RStudio work/R Shiny to analyze a survey data from Eduvos IT graduates.R')
runApp('RStudio work/R Shiny to analyze a survey data from Eduvos IT graduates.R')
runApp('RStudio work/R Shiny to analyze a survey data from Eduvos IT graduates.R')
#QUESTION 1
#Install the necessary libraries
install.packages("dplyr")
install.packages("tidyr")
install.packages("readr")
#Load the necessary libraries
library(dplyr)
library(tidyr)
library(readr)
#Load the dataset
data <- read_csv("C:/graduate_survey.csv")
#Selecting relevant columns
relevant_columns <- c("Campus", "StudyField", "Branch", "Role", "EduLevel", "ProgLang", "Databases", "Platform", "WebFramework", "Industry", "AISearch", "AITool", "Employment")
cleaned_data <- data %>%
select(all_of(relevant_columns))
#Missing value treatment
#Check for missing values
missing_values <- colSums(is.na(cleaned_data))
#Remove all rows with missing values for simplicity
cleaned_data <- cleaned_data %>%
drop_na()
#Standardizing categorical columns
cleaned_data <- cleaned_data %>%
mutate(Campus = case_when(
Campus %in% c("Durban", "Umhlanga") ~ "Durban",
Campus %in% c("Mbombela", "Nelspruit") ~ "Mbombela",
Campus %in% c("Nelson Mandela Bay", "Port Elizabeth") ~ "Nelson Mandela Bay",
TRUE ~ Campus
))
#Subsetting data
#Count responses per campus
campus_counts <- cleaned_data %>%
count (Campus) %>%
arrange(desc(n))
#Selecting the top 3-5 campuses
top_campuses <- campus_counts %>%
top_n(5,n) %>%
pull(Campus)
#Subset the data
cleaned_data <- cleaned_data %>%
filter(Campus %in% top_campuses)
#Checking the structure of the cleaned data
str(cleaned_data)
#Summary of the cleaned data
summary(cleaned_data)
#QUESTION 2
#Install the necessary libraries
install.packages("ggplot2")
install.packages("stringr")
#Load the necessary libraries
library(ggplot2)
library(stringr)
library(dplyr)
library(tidyr)
#Function to process multi-value columns
count_top_tools <- function(column_name){
cleaned_data %>%
select(all_of(column_name)) %>%
separate_rows(!!sym(column_name), sep = ";") %>%
count(!!sym(column_name), sort = TRUE)
}
#Count tools for each category
top_prog_langs <- count_top_tools("ProgLang")
top_databases <- count_top_tools("Databases")
top_platforms <- count_top_tools("Platform")
top_web_frameworks <- count_top_tools("WebFramework")
top_ai_search <- count_top_tools("AISearch")
top_ai_tools <- count_top_tools("AITool")
#Function to create bar plots
plot_top_tools <- function(data, title) {
ggplot(data, aes(x = reorder(!!sym(names(data)[1]), n), y = n)) +
geom_bar(stat = "identity", fill = "blue") +
coord_flip() +
labs(title = title, x = "Tools", y = "Count") +
theme_minimal()
}
#Create plots for each tool category
plot_top_tools(top_prog_langs, "Top Programming Languages used currently by Graduates in the tech space")
plot_top_tools(top_databases, "Top Databases used currently by Graduates in the tech space")
plot_top_tools(top_platforms, "Top Platforms used currently by Graduates in the tech space")
plot_top_tools(top_web_frameworks, "Top Web Frameworks used currently by Graduates in the tech space")
plot_top_tools(top_ai_search, "Top AI Search used currently by Graduates in the tech space")
plot_top_tools(top_ai_tools, "Top AI Developer Tools used currently by Graduates in the tech space")
#Count industries by study field
industry_counts <- cleaned_data %>%
select(StudyField, Industry) %>%
separate_rows(Industry, sep = ";") %>%
count(StudyField, Industry, sort = TRUE)
#Create a plot for industries
ggplot(industry_counts, aes(x = reorder(Industry, n), y = n, fill = StudyField)) +
geom_bar(stat = "identity", position = "dodge") +
coord_flip() +
labs(title = "Most popular Industries graduates go into from the various Study Fields", x = "Industry", y = "Count") +
theme_minimal()
#Count job roles
job_role_counts <- cleaned_data %>%
count(StudyField, Role, sort = TRUE)
#Create a plot for job roles
ggplot(job_role_counts, aes(x = reorder(Role,n), y = n, fill = StudyField)) +
geom_bar(stat = "identity", fill = "orange") +
coord_flip() +
labs(title = "Top Job Roles graduates go into from the various Study Fields", x = "Job Role", y = "Count") +
theme_minimal()
#Calculate employment rate
employment_rate <- cleaned_data %>%
group_by(StudyField) %>%
summarise(Employed = sum(str_detect(Employment, "Employed")),
Total = n(),
EmploymentRate = Employed / Total * 100)
#Create a plot for employment rates
ggplot(employment_rate, aes(x = StudyField, y = EmploymentRate, fill = StudyField)) +
geom_bar(stat = "identity", position = "stack") +
labs(title = "Employment Rate of graduates from each Study Field", x = "Study Field", y = "Employment Rate (%)") +
theme_minimal()
runApp('RStudio work/R Shiny to analyze a survey data from Eduvos IT graduates.R')
runApp('RStudio work/R Shiny to analyze a survey data from Eduvos IT graduates.R')
runApp('RStudio work/R Shiny to analyze a survey data from Eduvos IT graduates.R')
setwd("~/RStudio work")
